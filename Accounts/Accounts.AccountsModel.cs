//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 5/14/2023 2:12:46 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AccountsModel
{

    public partial class AccountsModel : DbContext
    {

        public AccountsModel() :
            base()
        {
            OnCreated();
        }

        public AccountsModel(DbContextOptions<AccountsModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=192.168.50.16;Initial Catalog=Accounts;Integrated Security=False;Persist Security Info=True;User ID=bmtron;Password=Frankreynolds#30;Trust Server Certificate=True;");
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<AccountLogin> AccountLogins
        {
            get;
            set;
        }

        public virtual DbSet<MasterAccount> MasterAccounts
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AccountLoginMapping(modelBuilder);
            this.CustomizeAccountLoginMapping(modelBuilder);

            this.MasterAccountMapping(modelBuilder);
            this.CustomizeMasterAccountMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region AccountLogin Mapping

        private void AccountLoginMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountLogin>().ToTable(@"AccountLogins", @"dbo");
            modelBuilder.Entity<AccountLogin>().Property(x => x.LoginId).HasColumnName(@"loginId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<AccountLogin>().Property(x => x.Account).HasColumnName(@"account").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<AccountLogin>().Property(x => x.Username).HasColumnName(@"username").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AccountLogin>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar(150)").IsRequired().ValueGeneratedNever().HasMaxLength(150);
            modelBuilder.Entity<AccountLogin>().Property(x => x.Website).HasColumnName(@"website").HasColumnType(@"varchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AccountLogin>().Property(x => x.FkMasterId).HasColumnName(@"fk_masterId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<AccountLogin>().HasKey(@"LoginId");
        }

        partial void CustomizeAccountLoginMapping(ModelBuilder modelBuilder);

        #endregion

        #region MasterAccount Mapping

        private void MasterAccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<MasterAccount>().ToTable(@"MasterAccounts", @"dbo");
            modelBuilder.Entity<MasterAccount>().Property(x => x.MasterId).HasColumnName(@"masterId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<MasterAccount>().Property(x => x.Username).HasColumnName(@"username").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<MasterAccount>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<MasterAccount>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<MasterAccount>().Property(x => x.AspUserID).HasColumnName(@"AspUserID").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<MasterAccount>().HasKey(@"MasterId");
        }

        partial void CustomizeMasterAccountMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountLogin>().HasOne(x => x.MasterAccount).WithMany(op => op.AccountLogins).HasForeignKey(@"FkMasterId").IsRequired(true);

            modelBuilder.Entity<MasterAccount>().HasMany(x => x.AccountLogins).WithOne(op => op.MasterAccount).HasForeignKey(@"FkMasterId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
